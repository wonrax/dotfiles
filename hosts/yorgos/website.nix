{
  pkgs,
  lib,
  ...
}:

{
  # make sure mounted directories are created first
  systemd.tmpfiles.rules = [
    "d /etc/wrx-sh/www/wrx.sh 0775 root root -"
    "d /etc/wrx-sh/www/files.wrx.sh 0775 root root -"
  ];

  virtualisation.oci-containers.containers."schema-migrator" = {
    image = "ghcr.io/wonrax/wrx-sh-migrator:latest";
    environmentFiles = [
      "/etc/wrx-sh/.env"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=wrx-sh_default"
    ];
  };

  systemd.services."podman-schema-migrator" = {
    serviceConfig = {
      Type = lib.mkForce "oneshot";
      Restart = lib.mkForce "no";
      RemainAfterExit = true;
    };
    after = [
      "podman-network-wrx-sh_default.service"
      "postgresql.service"
    ];
    requires = [
      "podman-network-wrx-sh_default.service"
      "postgresql.service"
    ];
    partOf = [
      "podman-compose-wrx-sh-root.target"
    ];
    wantedBy = [
      "podman-compose-wrx-sh-root.target"
    ];
  };

  virtualisation.oci-containers.containers."wrx-sh-api" = {
    image = "ghcr.io/wonrax/wrx-sh-api:latest";
    workdir = "/";
    ports = [
      "3000:3000"
    ];
    environmentFiles = [
      "/etc/wrx-sh/.env"
    ];
    environment = {
      # hf-hub expects a $HOME dir, but nixos does not define one
      HOME = "/";
    };
    dependsOn = [
      "schema-migrator"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=wrx-sh_default"
    ];
  };

  systemd.services."podman-wrx-sh-api" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-wrx-sh_default.service"
      "postgresql.service"
    ];
    requires = [
      "podman-network-wrx-sh_default.service"
      "postgresql.service"
    ];
    partOf = [
      "podman-compose-wrx-sh-root.target"
    ];
    wantedBy = [
      "podman-compose-wrx-sh-root.target"
    ];
  };

  virtualisation.oci-containers.containers."wrx-sh-www" = {
    image = "ghcr.io/wonrax/wrx-sh-www:latest";
    volumes = [
      "/etc/wrx-sh/www/wrx.sh:/.mount:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=www"
      "--network=wrx-sh_default"
    ];
  };

  systemd.services."podman-wrx-sh-www" = {
    serviceConfig = {
      Restart = lib.mkForce "no";
      Type = lib.mkForce "oneshot"; # only used to copy the files to mounted volume
      RemainAfterExit = true;
    };
    after = [
      "podman-network-wrx-sh_default.service"
    ];
    requires = [
      "podman-network-wrx-sh_default.service"
    ];
    partOf = [
      "podman-compose-wrx-sh-root.target"
    ];
    wantedBy = [
      "podman-compose-wrx-sh-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-wrx-sh_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Restart = lib.mkForce "no";
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f wrx-sh_default";
    };
    script = ''
      podman network inspect wrx-sh_default || podman network create wrx-sh_default
    '';
    partOf = [ "podman-compose-wrx-sh-root.target" ];
    wantedBy = [ "podman-compose-wrx-sh-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-wrx-sh-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
